name: macOS builds

on:
  workflow_dispatch:
  push:
    branches:
      - macos-app

jobs:
  build_and_notarize_macos_app:
    name: Build macOS app on ${{ matrix.runner }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install silx
        run: pip install .[full]
      - name: Install pyinstaller
        # Install PyInstaller from source and compile bootloader.
        env:
          PYINSTALLER_COMPILE_BOOTLOADER: "1"
        run: pip install pyinstaller --no-binary pyinstaller
      - name: Build app 
        env:
          ACTIONS_STEP_DEBUG: true
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERTIFICATE_PASSWORD }}
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERTIFICATE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          cd package/pyinstaller
          pyinstaller pyinstaller.spec
      - uses: actions/upload-artifact@v4
        with:
          name: macos-app-${{ matrix.arch }}
          path: |
            ./package/pyinstaller/artifacts/*.dmg

  test_macos_app:
    needs: [build_and_notarize_macos_app]
    name: Test macOS app on ${{ matrix.runner }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: macos-app-${{ matrix.arch }}
      - name: Mount the disk image
        run: hdiutil attach *.dmg
      - name: Test app
        run: |
          VOLUME=$(hdiutil info | grep "/Volumes/" | tail -1 | awk '{print $3}')
          cd "$VOLUME"
          if [ -d "silx-view.app" ]; then
            ./silx-view.app/Contents/MacOS/silx-view --help
          fi
          hdiutil detach "$VOLUME"