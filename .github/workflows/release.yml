name: Build and deploy

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build sdist
        run: python -m build --sdist
      - name: Check the package
        run: python -m twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  test_sdist:
    needs: [build_sdist]
    name: Test source distribution
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - uses: ./.github/actions/setup-system
      - uses: actions/download-artifact@v4
        with:
          name: cibw-sdist
          path: dist
      - name: Install from sdist
        run: pip install "$(ls dist/silx-*.tar.gz)[full,test]"
      - name: Run tests
        env:
          WITH_QT_TEST: "False"
          WITH_GL_TEST: "False"
          SILX_OPENCL: "False"
        run: python -c "import silx.test, sys; sys.exit(silx.test.run_tests(verbosity=3))"

  build_doc:
    name: Build documentation
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - uses: ./.github/actions/setup-system
      - name: Install pandoc&graphviz
        run: sudo apt-get install pandoc graphviz
      - name: Install silx
        run: pip install .[full,test,doc] siphash24
      - name: Build doc
        env:
          QT_QPA_PLATFORM: "offscreen"
        run: |
          export SILX_VERSION="$(python -c 'import silx; print(silx.strictversion)')"
          sphinx-build --fail-on-warning doc/source/ "silx-${SILX_VERSION}_documentation/"
          zip -r "silx-${SILX_VERSION}_documentation.zip" "silx-${SILX_VERSION}_documentation/"
      - uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: silx-*_documentation.zip

  build_windows_installer:
    name: Build Windows installer
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install silx
        run: pip install .[full,test]
      - name: Install pyinstaller
        # Install PyInstaller from source and compile bootloader.
        env:
          PYINSTALLER_COMPILE_BOOTLOADER: "1"
          PYINSTALLER_BOOTLOADER_WAF_ARGS: "--msvc_target=x64"
        run: pip install pyinstaller --no-binary pyinstaller
      - name: Build installer
        run: |
          cd package/pyinstaller
          pyinstaller pyinstaller.spec
      - uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            ./package/pyinstaller/artifacts/silx-*.exe
            ./package/pyinstaller/artifacts/silx-*.zip

  test_windows_installer:
    needs: [build_windows_installer]
    name: Test Windows installer
    runs-on: windows-2022
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-installer
      - name: Unzip installer
        run: 7z x silx-*.zip
      - name: Test
        run: |
          cd silx
          ./silx.exe view --help
          ./silx.exe --help

  build_and_notarize_macos_app:
    name: Build macOS app on ${{ matrix.runner }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install silx
        run: pip install .[full]
      - name: Install pyinstaller
        # Install PyInstaller from source and compile bootloader.
        env:
          PYINSTALLER_COMPILE_BOOTLOADER: "1"
        run: pip install pyinstaller --no-binary pyinstaller
      - name: Build app
        env:
          ACTIONS_STEP_DEBUG: true
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERTIFICATE_PASSWORD }}
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERTIFICATE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          cd package/pyinstaller
          pyinstaller pyinstaller.spec
      - uses: actions/upload-artifact@v4
        with:
          name: macos-app-${{ matrix.arch }}
          path: |
            ./package/pyinstaller/artifacts/*.dmg

  test_macos_app:
    needs: [build_and_notarize_macos_app]
    name: Test macOS app on ${{ matrix.runner }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: macos-app-${{ matrix.arch }}
      - name: Mount the disk image
        run: hdiutil attach *.dmg
      - name: Test app
        run: |
          VOLUME=$(hdiutil info | grep "/Volumes/" | tail -1 | awk '{print $3}')
          cd "$VOLUME"
          if [ -d "silx.app" ]; then
            ./silx.app/Contents/MacOS/silx-view --help
            ./silx.app/Contents/MacOS/silx --help
          fi
          hdiutil detach "$VOLUME"

  build_wheels:
    name: Build wheels on ${{ matrix.os }}-${{ matrix.cibw_archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails.
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            cibw_archs: "auto64"
          - os: ubuntu-22.04
            cibw_archs: "aarch64"
          - os: ubuntu-22.04
            cibw_archs: "ppc64le"
          - os: windows-2022
            cibw_archs: "auto64"
          - os: macos-14
            cibw_archs: "x86_64"
          - os: macos-14
            cibw_archs: "arm64"

    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux'
        with:
          platforms: all
      - uses: pypa/cibuildwheel@v3.0.0
        env:
          # Configure silx tests
          WITH_QT_TEST: "False"
          WITH_GL_TEST: "False"
          SILX_OPENCL: "False"

          CIBW_ENVIRONMENT_PASS_LINUX: WITH_QT_TEST WITH_GL_TEST SILX_OPENCL

          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
          CIBW_SKIP: "*-musllinux_*"
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD_FRONTEND: "build; args: -C setup-args=-Duse_openmp=disabled"

          # Install test dependencies
          CIBW_BEFORE_TEST_LINUX: yum install -y mesa-libEGL mesa-libGL libxkbcommon-x11 libxkbcommon xcb-util-image xcb-util-keysyms libXrandr xcb-util-renderutil libXcursor libxcb
          CIBW_TEST_EXTRAS: "full,test"
          CIBW_TEST_COMMAND: pytest --verbosity=3 --pyargs silx
          # Skip tests for emulated architectures
          CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x}"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  pypi-publish:
    needs:
      [
        build_doc,
        build_sdist,
        build_wheels,
        test_sdist,
        build_windows_installer,
        test_windows_installer,
        build_and_notarize_macos_app,
        test_macos_app,
      ]
    name: Upload release to PyPI
    runs-on: ubuntu-22.04
    environment:
      name: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1

  windows-installer-publish:
    needs: [build_windows_installer, test_windows_installer]
    name: Upload Windows installer
    runs-on: ubuntu-22.04
    environment:
      name: assets
    permissions:
      contents: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v4
        with:
          name: windows-installer
      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export ASSETS=$(ls silx-*.exe silx-*.zip)
          echo "ASSETS=${ASSETS}"
          gh release upload ${{ github.event.release.tag_name }} ${ASSETS}

  macos-app-publish:
    needs: [build_and_notarize_macos_app, test_macos_app]
    name: Upload macOS app
    runs-on: ubuntu-24.04
    environment:
      name: assets
    permissions:
      contents: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          pattern: macos-app-*
          path: dmg-files
          merge-multiple: true
      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd dmg-files
          export ASSETS=$(ls *.dmg)
          echo "ASSETS=${ASSETS}"
          gh release upload ${{ github.event.release.tag_name }} ${ASSETS}
